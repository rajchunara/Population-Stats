{"version":3,"sources":["components/Barchart.js","components/Form.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Barchart","drawChart","d3","remove","margin","graphWidth","graphHeight","svg","append","attr","style","graph","concat","console","log","y","domain","_this","props","data","d","total","range","x","map","item","age","paddingInner","paddingOuter","xAxisGroup","yAxisGroup","selectAll","enter","bandwidth","transition","duration","i","xAxis","tickValues","yAxis","ticks","call","text","prevProps","_this2","this","setTimeout","react_default","a","createElement","className","Component","Form","state","countries","apiUrl","obj","country","Category","year","countrySearch","yearSearch","err","onCountryChange","e","desh1","target","value","toLowerCase","desh2","charAt","toUpperCase","slice","setState","onYearChange","componentDidMount","axios","get","then","res","submitClick","catch","list","push","details","opt","yr","key","lib","placeholder","type","onChange","s","label","defaultValue","waves","onClick","components_Barchart","Nav","href","App","components_Nav","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.128179de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nclass Barchart extends Component{\r\n\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.data !== this.props.data) {\r\n      setTimeout((props)=>{ this.drawChart(); }, 500);\r\n    }\r\n  } \r\n\r\n  drawChart=()=>{\r\n      d3.select(\"svg\").remove();\r\n      const margin={top:20, right:20, bottom:100, left:100};\r\n      const graphWidth = 1000 - margin.left - margin.right;\r\n      const graphHeight = 500 - margin.top - margin.bottom;\r\n\r\n      const svg = d3.select(\".canvas\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", 1000)\r\n      .attr(\"height\", 500)\r\n      .style(\"margin-left\", 200)\r\n      .style(\"margin-top\", 0)\r\n      .style(\"padding-top\", 0);\r\n\r\n      const graph = svg.append('g')\r\n        .attr('width', graphWidth)\r\n        .attr('height', graphHeight)\r\n        .attr('transfrom', `translate(${margin.left+30},${margin.top})`);\r\n\r\n      console.log(graphWidth);\r\n\r\n      const y = d3.scaleLinear()\r\n        .domain([0,d3.max(this.props.data, d=>d.total)])\r\n        .range([graphHeight,0]);\r\n\r\n      const x = d3.scaleBand()\r\n        .domain(this.props.data.map(item => item.age))\r\n        .range([0,800])\r\n        .paddingInner(0.2)\r\n        .paddingOuter(0.2);\r\n\r\n      const xAxisGroup = graph.append('g')\r\n      .attr('transform',`translate(80,${graphHeight+5})`);\r\n      const yAxisGroup = graph.append('g');\r\n\r\n      graph.selectAll(\"rect\")\r\n        .data(this.props.data)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"x\", (d) => x(d.age) )        \r\n        .attr(\"y\", graphHeight)\r\n        .attr(\"width\", x.bandwidth)\r\n        .attr('height', 0)        \r\n        .attr(\"fill\", \"orange\")\r\n        .attr(\"transform\", \"translate(80,5)\")\r\n        .transition().duration(500)        \r\n          .attr(\"y\", d => y(d.total))\r\n          .attr(\"height\", (d, i) => graphHeight-y(d.total));\r\n\r\n      const xAxis = d3.axisBottom(x)\r\n      .tickValues([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]);\r\n                      \r\n      const yAxis = d3.axisLeft(y).ticks(10, \"s\");\r\n\r\n      xAxisGroup.call(xAxis);\r\n\r\n      svg.append(\"text\")      // text label for the x axis\r\n        .attr(\"x\", graphWidth/2 )\r\n        .attr(\"y\", graphHeight + 50 )\r\n        .style(\"text-anchor\", \"middle\")\r\n        .text(\"age (years)\");\r\n\r\n        svg.append(\"text\")      // text label for the y axis\r\n        .attr(\"transform\", `translate(25,${graphHeight/2}) rotate(-90)`)\r\n        .style(\"text-anchor\", \"middle\")\r\n        .text(\"Population\");\r\n\r\n      yAxisGroup.attr(\"transform\", \"translate(80,5)\")\r\n      .call(yAxis);    \r\n\r\n  }\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"canvas\">       \r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Barchart;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Barchart from './Barchart';\r\nimport {Row,\r\n  Input,\r\n   Button\r\n }from 'react-materialize';\r\n   \r\n\r\n\r\nclass Form extends Component {\r\n\r\n  state={\r\n    countries:[],\r\n    apiUrl:'http://api.population.io:80/1.0/countries',\r\n    obj:{},\r\n    country:\"Canada\",\r\n    Category:\"males\",\r\n    year:2019,\r\n    data:[],\r\n    countrySearch:'Canada',\r\n    yearSearch:2019,\r\n    err:0\r\n    // malePopulation:[], for future use\r\n    // femalePopulation:[],\r\n    // age:[],\r\n    \r\n  }\r\n\r\n  //For Autocomplete\r\n\r\n  // componentDidMount=()=>{\r\n  //   //Get countries names for Autocomplete\r\n  //   axios.get(`${this.state.apiUrl}`)\r\n  //    .then(res => {\r\n  //      this.setState({\r\n  //        countries:res.data.countries,\r\n  //      })\r\n  //      // console.log(this.state.countries);\r\n  //    })\r\n  //    .then(()=>{\r\n  //      this.setState({\r\n  //        //convert array of countries in object for autocomplete\r\n  //       obj: Object.assign({},...this.state.countries.map(d => ({[d]: null})))\r\n  //      })\r\n  //      // console.log(this.state.obj);\r\n  //    });\r\n  // }\r\n\r\nonCountryChange=(e)=>{\r\n  let desh1=e.target.value.toLowerCase();\r\n  let desh2=desh1.charAt(0).toUpperCase() + desh1.slice(1);\r\n  this.setState({\r\n    country:desh2\r\n  });\r\n}\r\n\r\n\r\nonYearChange=(e)=>{\r\n  this.setState({\r\n    year:e.target.value}\r\n  );\r\n}\r\n\r\ncomponentDidMount=()=>{\r\n  axios.get(`http://api.population.io:80/1.0/population/${this.state.year}/${this.state.country}/`)\r\n    .then(res => {\r\n      this.setState({\r\n        data:res.data,\r\n        countrySearch:this.state.country,\r\n        yearSearch:this.state.year\r\n         // malePopulation: res.data.map( a => a.males), for future use\r\n        // age: res.data.map( a=> a.age),\r\n        // femalePopulation: res.data.map( a => a.females),\r\n      })\r\n    })\r\n}\r\n\r\nsubmitClick=()=>{\r\n  axios.get(`http://api.population.io:80/1.0/population/${this.state.year}/${this.state.country}/`)\r\n    .then(res => {\r\n      this.setState({\r\n        data:res.data,        \r\n        countrySearch:this.state.country,\r\n        yearSearch:this.state.year,\r\n        err:0\r\n        // malePopulation: res.data.map( a => a.males), for future use\r\n        // age: res.data.map( a=> a.age),\r\n        // femalePopulation: res.data.map( a => a.females),\r\n      })\r\n    }).catch(err =>{\r\n      this.setState({\r\n        err:1\r\n      })\r\n    });\r\n}\r\n\r\n  render() {\r\n    const list = [];\r\n        for (let i = 1950; i <= 2100; i++) {\r\n            list.push(i);\r\n        }\r\n\r\n        const opt = (        \r\n             list.map(yr =>(<option key={yr} value={yr}>{yr}</option>))            \r\n           ); \r\n      let details\r\n\r\n      if(!this.state.err){\r\n         details= (<div className=\"container center-align  green accent-1 row\">\r\n        <p className=\"Info col s4 push-s2\">Country : {this.state.countrySearch} </p>\r\n        <p className=\"Info col s4 push-s2\"> Year : {this.state.yearSearch} </p>\r\n        </div>)\r\n      }else{\r\n        details = <div className=\"container center-align  red lighten-5 row\">\r\n        <p className=\"Info col s4 push-s2\">Please enter valid country name </p>\r\n        </div>\r\n      }\r\n\r\n      return (\r\n        <div>          \r\n          <Row className=\"container form-fields valign-wrapper\">            \r\n              <div className=\"input-field col s6\">\r\n                <input placeholder=\"eg. Canada\"  type=\"text\" data={this.state.obj}\r\n                onChange={this.onCountryChange} className=\"validate\"></input>\r\n                <label>Enter Country Name</label>\r\n              </div>         \r\n\r\n              <Input  s={4} type='select' label=\"Year\" onChange={this.onYearChange} defaultValue={2019}>\r\n                {opt}\r\n              </Input>              \r\n              <Button className=\"col s2\" waves='light'  onClick={this.submitClick}>Show Data</Button>\r\n          </Row>\r\n\r\n          <div className=\"col s8\">\r\n            {details}\r\n            <Barchart  data={this.state.data} />\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\n\r\nconst Nav = () => {\r\n  return(\r\n    <div>    \r\n      <nav>\r\n        <div className=\"nav-wrapper container\">\r\n          <a href=\"#\" className=\"brand-logo\">Population Stats</a>\r\n          \r\n        </div>\r\n      </nav>      \r\n    </div>\r\n  )\r\n}\r\nexport default Nav;\r\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Nav from './components/Nav';\n\nclass App extends Component {\n\n\n  render() {\n\n      return (\n        <div className=\"App\" >\n          <Nav/>\n          <Form/>\n        </div>\n      );\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}